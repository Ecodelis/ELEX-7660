// enc2freq_tb.sv - Testbench for the enc2freq module
// Tests if CW and CCW pulses adjust frequency output with reset_n
// Author: Marcus Fu
// Date: 2025-02-03

`timescale 1ms/1ms

module enc2freq_tb;

    // Testbench signals
    logic clk = 0;
    logic reset_n = 0;
    logic cw = 0, ccw = 0;
    logic [31:0] freq;

    // Expected frequency values for each count
    int expected_count[] = '{0, 262, 295, 328, 349, 393, 437, 491, 524};

    // Tracks index
    int index = 0;

    // Flag to track if testbench failed
    logic tb_fail = 0; 

    // Instantiate the enc2freq module as DUT
    enc2freq dut (
        .cw(cw),
        .ccw(ccw),
        .freq(freq),
        .reset_n(reset_n),
        .clk(clk)
    );

    // Clock generation (20Hz)
    always #25ms clk = ~clk;

    // Function to check if actual value matches expected value
    function logic check_value(int expected, int actual);
        if (expected !== actual) begin
            $display("FAIL: Expected %d, but got %d at time %t", expected, actual, $time);
            return 1;
        end
        return 0;
    endfunction

    // Task to generate 4 pulses (CW or CCW)
    task rotary_turn(input string signal_name);
        begin
            for (int i = 0; i < 4; i++) begin

                if (signal_name == "cw")
                    cw = 1;
                else if (signal_name == "ccw")
                    ccw = 1;

                @(negedge clk);

                if (signal_name == "cw")
                    cw = 0;
                else if (signal_name == "ccw")
                    ccw = 0;

                @(negedge clk);
            end
        end
    endtask

    initial begin
        // Apply reset
        reset_n = 0;
        index = 0;
        @(negedge clk);
        reset_n = 1;
        
        // Frequency should be 0 after reset
        tb_fail |= check_value(expected_count[index], freq);

        // Test case: Increment frequency via CW turns.
        // 9 counts to check if count saturates and stops at 8.
        for (int i = 0; i < 9; i++) begin
            tb_fail |= check_value(expected_count[index], freq);
            rotary_turn("cw");
            index++;
        end

        // Test case: Apply a reset.
        reset_n = 0;
        index = 0;
        @(negedge clk);

        tb_fail |= check_value(expected_count[index], freq);

        reset_n = 1;

        // Test case: Increment after reset is lifted.
        for (int i = 0; i < 3; i++) begin
            tb_fail |= check_value(expected_count[index], freq);
            rotary_turn("cw");
            index++;
        end

        // Test case: Decrement frequency via CCW turns.
        // 4 counts to check if count floors and stops at 0.
        for (int i = 4; i > 0; i--) begin
            tb_fail |= check_value(expected_count[index], freq);
            rotary_turn("ccw");
            index--;
        end

        if (tb_fail)
            $display("Lab 2 Encoder Simulation *** FAILED *** See transcript for details");
        else
            $display("Lab 2 Encoder Simulation *** PASSED ***");
        $stop;
    end

endmodule
